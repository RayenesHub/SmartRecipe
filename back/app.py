# app.py
# ------------------------------------------------------------------
# Application Flask (API REST)
# Expose :
# - GET  /           : ping de sant√©
# - POST /generate-recipe : g√©n√®re recette + image (r√©ponse JSON)
# ------------------------------------------------------------------

from flask import Flask, request, jsonify  # serveur web + JSON
from flask_cors import CORS                # autorise CORS (appel depuis Angular)
from recipe_generator import generate_recipe  # notre logique "m√©tier"

# Cr√©e l'app Flask
app = Flask(__name__)

# Active CORS sur toutes les routes (pratique en dev)
CORS(app)

@app.after_request
def add_charset_header(resp):
    # Si la r√©ponse est de type JSON, on pr√©cise le charset
    if resp.mimetype == "application/json":
        resp.headers["Content-Type"] = "application/json; charset=utf-8"
    return resp

@app.route("/", methods=["GET"])
def home():
    """
    Route de test : permet de v√©rifier que le backend est op√©rationnel.
    """
    return jsonify({"message": "‚úÖ Backend SmartRecipe (Ollama + HuggingFace) op√©rationnel üöÄ"})


@app.route("/generate-recipe", methods=["POST"])
def recipe():
    """
    Re√ßoit un JSON {"ingredients": "..."} depuis le frontend Angular,
    appelle la g√©n√©ration (texte + image), renvoie un JSON complet.
    """
    try:
        # R√©cup√®re le JSON de la requ√™te HTTP
        data = request.get_json()

        # Extrait la cha√Æne des ingr√©dients (strip pour nettoyer)
        ingredients = (data.get("ingredients") or "").strip()

        # Si aucun ingr√©dient : erreur 400 c√¥t√© client
        if not ingredients:
            return jsonify({"error": "Veuillez fournir une liste d'ingr√©dients"}), 400

        # Appelle la fonction de g√©n√©ration (Ollama + Hugging Face)
        recipe_data = generate_recipe(ingredients)

        # Renvoie le JSON au frontend
        return jsonify(recipe_data)

    except Exception as e:
        # En cas d'erreur inattendue c√¥t√© serveur : 500
        return jsonify({"error": f"Erreur serveur : {str(e)}"}), 500


if __name__ == "__main__":
    # Message console au d√©marrage + run serveur en debug
    print("üöÄ Serveur SmartRecipe lanc√© sur http://127.0.0.1:5000")
    app.run(debug=True)
